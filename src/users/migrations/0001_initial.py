# Generated by Django 4.2.16 on 2025-08-16 10:37

from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('module', '0001_initial'),
        ('filiere', '0001_initial'),
        ('role', '0001_initial'),
        ('classe', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150)),
                ('last_name', models.CharField(blank=True, max_length=150)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('password', models.CharField(blank=True, max_length=255)),
                ('phone', models.CharField(blank=True, max_length=8)),
                ('fonction', models.CharField(blank=True, max_length=150)),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('classe', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='users', to='classe.classe')),
                ('filiere', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='users', to='filiere.filiere')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('modules', models.ManyToManyField(blank=True, related_name='users', to='module.module')),
                ('roles', models.ManyToManyField(related_name='users', to='role.role')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
